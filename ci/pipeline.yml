---
meta:
  name: cfcr-compiled-deployment
  pipeline: (( grab meta.name ))

  image:
    name: starkandwayne/concourse
    tag: latest

  git:
    email:  (( param "Please provide the git email for automated commits" ))
    name:   (( param "Please provide the git name for automated commits" ))

  github:
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  aws:
    bucket:     (( grab meta.pipeline ))
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID for your pipeline S3 Bucket" ))
    secret_key: (( param "Please set your AWS Secret Key ID for your pipeline S3 Bucket" ))

  bosh:
    target:     (( param "Please specify the BOSH target URI for the bosh to run test deployments against" ))
    cacert:     (( param "Please specify the BOSH Director Root CA cert" ))
    username:   admin
    password:   (( param "Please specify the BOSH Director admin password" ))

groups:
- name: main
  jobs:
  - testflight
  - manifest
  - docker-compile-release-3586
  - etcd-compile-release-3586
  - kubo-compile-release-3586
  - bpm-compile-release-3586
  - bosh-dns-compile-release-3586
jobs:
- name: testflight
  public: true
  serial_groups: [testflight]
  plan:
    - do:
      - get: git
      - name: bosh-deploy-testflight
        put: bosh-deploy-testflight
        params:
          manifest: git/cfcr.yml
          ops_files:
          - git/ci/operators/testflight.yml
          vars:
            name: cfcr-testflight
      ensure:
        put: bosh-deploy-testflight
        params:
          delete:
            enabled: true
            force:  true
          manifest: git/cfcr.yml
          ops_files: [git/ci/operators/testflight.yml]

- name: manifest
  public: true
  serial_groups: [testflight]
  plan:
    - do:
      - aggregate:
        - get: git
        - get: cfcr-manifests
          trigger: true
          params: {include_source_tarball: true, globs: [x]}
        - get: kubo-compiled-release
          passed: [kubo-compile-release-3586]
        - get: bosh-dns-compiled-release
          passed: [bosh-dns-compile-release-3586]
        - get: bpm-compiled-release
          passed: [bpm-compile-release-3586]
        - get: docker-compiled-release
          passed: [docker-compile-release-3586]
        - get: etcd-compiled-release
          passed: [etcd-compile-release-3586]
        - get: ubuntu-trusty-stemcell-3586
          trigger: true
          passed: [kubo-compile-release-3586]
          params: {tarball: false}
      - task: update-manifest
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - name: git
            - name: cfcr-manifests
            - name: ubuntu-trusty-stemcell-3586
              path: stemcell
            - name: bosh-dns-compiled-release
            - name: bpm-compiled-release
            - name: docker-compiled-release
            - name: etcd-compiled-release
            - name: kubo-compiled-release
          outputs:
            - name: pushme
          run:
            path: git/ci/scripts/update-manifest
          params:
            REPO_ROOT: git
            REPO_OUT:  pushme
            REPO_OUT_BRANCH: master
            GIT_EMAIL: (( grab meta.git.email ))
            GIT_NAME:  (( grab meta.git.name ))
      - name: bosh-deploy-testflight
        put: bosh-deploy-testflight
        params:
          manifest: pushme/cfcr.yml
          ops_files:
          - git/ci/operators/testflight.yml
          - git/operators/rename.yml
          vars:
            deployment_name: cfcr-testflight
        on_failure:
          task: show-logs
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: (( grab meta.image.name ))
                tag:        (( grab meta.image.tag ))
            outputs:
              - name: pushme
            run:
              path: bosh
              args: [logs, --num, 200]
            params:
              BOSH_DEPLOYMENT:    cfcr-testflight
              BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
              BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
              BOSH_CLIENT:        (( grab meta.bosh.username ))
              BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
      - name: upload-git
        put: git
        params:
          rebase: true
          repository: pushme
      ensure:
        put: bosh-deploy-testflight
        params:
          delete:
            enabled: true
            force:  true
          manifest: pushme/cfcr.yml
          ops_files:
          - git/ci/operators/testflight.yml
          - git/operators/rename.yml
          vars:
            deployment_name: cfcr-testflight

- name: bpm-compile-release-3586
  public: true
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: bpm-release
        trigger: true
      - get: ubuntu-trusty-stemcell-3586
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3586
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
          STEMCELL_CPI:       warden-boshlite
    - put: bpm-compiled-release
      params:
        file: "compiled-release/bpm/*.tgz"

- name: bosh-dns-compile-release-3586
  public: true
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: bosh-dns-release
        trigger: true
      - get: ubuntu-trusty-stemcell-3586
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3586
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
          STEMCELL_CPI:       warden-boshlite
    - put: bosh-dns-compiled-release
      params:
        file: "compiled-release/bosh-dns/*.tgz"

- name: docker-compile-release-3586
  public: true
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: docker-boshrelease
        trigger: true
      - get: ubuntu-trusty-stemcell-3586
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3586
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
          STEMCELL_CPI:       warden-boshlite
    - put: docker-compiled-release
      params:
        file: "compiled-release/docker/*.tgz"

- name: etcd-compile-release-3586
  public: true
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: cfcr-etcd-release
        trigger: true
      - get: ubuntu-trusty-stemcell-3586
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3586
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
          STEMCELL_CPI:       warden-boshlite
    - put: etcd-compiled-release
      params:
        file: "compiled-release/cfcr-etcd/*.tgz"

- name: kubo-compile-release-3586
  public: true
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: kubo-release
        trigger: true
      - get: ubuntu-trusty-stemcell-3586
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3586
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
          STEMCELL_CPI:       warden-boshlite
    - put: kubo-compiled-release
      params:
        file: "compiled-release/kubo/*.tgz"

resources:
- name: git
  type: git
  source:
    uri: git@github.com:starkandwayne/cfcr-compiled-deployment.git
    branch:      master
    private_key: (( grab meta.github.private_key ))

- name: cfcr-manifests
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-deployment
    access_token: (( grab meta.github.access_token ))

- name: kubo-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/kubo-release
- name: bosh-dns-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/bosh-dns-release
- name: bpm-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/bpm-release
- name: docker-boshrelease
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: docker-boshrelease
    access_token: (( grab meta.github.access_token ))
- name: cfcr-etcd-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: cfcr-etcd-release
    access_token: (( grab meta.github.access_token ))

- name: ubuntu-trusty-stemcell-3586
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-trusty-go_agent
    version_family: 3586.latest

- name: bpm-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "bpm/.*-(\\d+).tgz"

- name: bosh-dns-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "bosh-dns/.*-(\\d+).tgz"

- name: docker-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "docker/.*-(\\d+).tgz"

- name: etcd-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "cfcr-etcd/.*-(\\d+).tgz"

- name: kubo-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "kubo/.*-(\\d+).tgz"

- name: bosh-deploy-testflight
  type: bosh2-deployment
  source:
    deployment: cfcr-testflight
    target:        (( grab meta.bosh.target ))
    ca_cert:       (( grab meta.bosh.cacert ))
    client:        (( grab meta.bosh.username ))
    client_secret: (( grab meta.bosh.password ))

resource_types:
- name: bosh2-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
